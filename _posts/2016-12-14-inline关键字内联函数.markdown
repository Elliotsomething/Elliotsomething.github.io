---
layout:     post
title:      "iOS-inline内联函数"
subtitle:   "Inline function"
date:       2016-12-14
author:     "Elliot"
header-img: "img/post-bg-ios9-web.jpg"
catalog:    true
tags:
    - iOS
    - inline
    - 内联函数
---

### inline关键字

inline关键字是用于内联函数的，就相当于宏定义一样，是一段直接在函数中展开的代码（宏是直接文本替换）

**inline目的是用于取代宏定义的函数代码；**

#### 取代这种形式的原因如下：

1． C中使用define这种形式宏定义的原因是因为，C语言是一个效率很高的语言，这种宏定义在形式及使用上像一个函数，但它使用预处理器实现，没有了参数压栈，代码生成等一系列的操作,因此，效率很高，这是它在C中被使用的一个主要原因。

2． 这种宏定义在形式上类似于一个函数，但在使用它时，仅仅只是做预处理器符号表中的简单替换，因此它不能进行参数有效性的检测，也就不能享受C++编译器严格类型检查的好处，另外它的返回值也不能被强制转换为可转换的合适的类型，这样，它的使用就存在着一系列的隐患和局限性。

3． 在C++中引入了类及类的访问控制，这样，如果一个操作或者说一个表达式涉及到类的保护成员或私有成员，你就不可能使用这种宏定义来实现(因为无法将this指针放在合适的位置)。

4． inline 推出的目的，也正是为了取代这种表达式形式的宏定义，它消除了宏定义的缺点，同时又很好地继承了宏定义的优点。

**对应于上面的1-3点，阐述如下：**

1． inline 定义的类的内联函数，函数的代码被放入符号表中，在使用时直接进行替换，（像宏一样展开），没有了调用的开销，效率也很高。

2． 很明显，类的内联函数也是一个真正的函数，编译器在调用一个内联函数时，会首先检查它的参数的类型，保证调用正确。然后进行一系列的相关检查，就像对待任何一个真正的函数一样。这样就消除了它的隐患和局限性。

3． inline 可以作为某个类的成员函数，当然就可以在其中使用所在类的保护成员及私有成员。

#### 在何时使用inline函数：

首先，你可以使用inline函数完全取代表达式形式的宏定义。

**另外要注意:** 内联函数一般只会用在函数内容非常简单的时候，这是因为，内联函数的代码会在任何调用它的地方展开，如果函数太复杂，代码膨胀带来的恶果很可能会大于效率的提高带来的益处。内联函数最重要的使用地方是用于类的存取函数。

#### 对于inline关键字定义的内联函数和不用inline定义的内联函数区别是：

**优点：** inline内联函数相当于直接文本替换，代码直接在调用的函数中展开，省去了函数调用的时间消耗；而不是内联函数则还需要去函数函数列表找到该函数指针，然后在执行该代码，增加了时间消耗；

**缺点：** inline内联函数本身很长的话，会增大函数的体积，代码膨胀的恶果可能大于效率带来的益处

#### 使用举例

```objective_c
static inline void method(int a,char *b) {
    //todo
}
//或者
extern Type Example(void);
inline Type Example(void)
{
    //..........
}
```


**注：inline说明对编译器来说只是一种建议，编译器可以选择忽略这个建议。比如，你将一个长达1000多行的函数指定为inline，编译器就会忽略这个inline，将这个函数还原成普通函数。**
